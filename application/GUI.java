package application;

import java.io.FileNotFoundException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

/**
 * The GUI class is resposible for displaying a GUI to the user, getting user inputs, displaying the
 * reports, and also handling bad user inputs.
 * 
 * @author Xuancheng Tu
 *
 */
public class GUI {
  // the MilkWeightManager object which actually controls the program.
  private MilkWeightManager mwm = new MilkWeightManager();
  // the current report which will be displayed on the GUI.
  private ListView<String> report = new ListView<String>();

  /**
   * This method generates an alert window with certain format and message
   * 
   * @param message The message to be displayed on the alert window
   * @return the alert window generated by this method.
   */
  private Alert alertGenerator(String message) {
    Alert alert = new Alert(AlertType.INFORMATION, message);
    alert.getDialogPane().setPrefSize(650, 225);
    alert.showAndWait().filter(response -> response == ButtonType.OK);
    return alert;
  }

  /**
   * This method is responsible for the GUI of file loading of this program
   * 
   * @return a VBox representing the GUI of file loading part.
   */
  public VBox loadFile() {
    Label l =
        new Label("Open local .csv file\nThe file should be in the same folder as the program.");
    Label l1 = new Label("Enter file name here:    ");
    Label l2 = new Label("\n\n");
    TextField t1 = new TextField(); // get file name from user input.
    Button b1 = new Button("Submit");
    HBox hb = new HBox();
    hb.getChildren().addAll(l1, t1, b1);
    VBox vb = new VBox();
    vb.getChildren().addAll(l, hb, l2);
    b1.setOnAction(e -> { // start reading file after this button is clicked.
      String fileName = t1.getText();
      String[] temp = fileName.split("\\.");
      String ending = temp[temp.length - 1];
      if (!(ending.equals("csv"))) { // check whether the file is a .csv file.
        String message =
            "Please enter a file name which ends in .csv. Only .csv file can be loaded!";
        Alert alert = alertGenerator(message);
      } else {
        try {
          String message = mwm.readCSVFile(fileName);
          Alert alert = alertGenerator(message);
        } catch (FileNotFoundException excpt) {
          String message = "The file is not found!";
          Alert alert = alertGenerator(message);
        }
      }
    });
    return vb;
  }

  /**
   * This method is responsible for the GUI of add/edit/remove milk weight record of this program
   * 
   * @return a VBox representing the GUI of this part.
   */
  public VBox addEditRemove() {
    Label l1 = new Label("Add/Edit/Remove milk weight information");
    Label l2 = new Label("Choose an action from add/edit/remove");
    ComboBox<String> cb = new ComboBox<String>(); // allows user to select from add/edit/remove
    cb.getItems().addAll("Add", "Edit", "Remove");
    Label LfarmID = new Label("  Farm ID:");
    Label Lyear = new Label("       Year:");
    Label Lmonth = new Label("    Month:");
    Label Lday = new Label("        Day:");
    Label Lweight = new Label("    Weight:");
    Label LnewWeight1 = new Label("New Weight:");
    Label LnewWeight2 = new Label("(New Weight field is for edit only)");
    TextField TfarmID = new TextField(); // get farm id from user input
    TextField Tyear = new TextField(); // get year from user input
    TextField Tmonth = new TextField(); // get month from user input
    TextField Tday = new TextField(); // get day from user input
    TextField Tweight = new TextField(); // get weight from user input
    TextField TnewWeight = new TextField(); // get new weight from user input(edit only)
    Button b1 = new Button("Submit");
    Label l4 = new Label("                              ");
    HBox h1 = new HBox();
    h1.getChildren().addAll(l4, b1);
    HBox hfarmID = new HBox();
    hfarmID.getChildren().addAll(LfarmID, TfarmID);
    HBox hyear = new HBox();
    hyear.getChildren().addAll(Lyear, Tyear);
    HBox hmonth = new HBox();
    hmonth.getChildren().addAll(Lmonth, Tmonth);
    HBox hday = new HBox();
    hday.getChildren().addAll(Lday, Tday);
    HBox hweight = new HBox();
    hweight.getChildren().addAll(Lweight, Tweight);
    HBox hnewWeight = new HBox();
    hnewWeight.getChildren().addAll(LnewWeight1, TnewWeight);
    Label l5 = new Label("  Enter information for a milk weight record here:");
    VBox v1 = new VBox();
    v1.getChildren().addAll(l5, hfarmID, hyear, hmonth, hday, hweight, hnewWeight, LnewWeight2, h1);
    VBox v2 = new VBox();
    v2.getChildren().addAll(l2, cb);
    BorderPane bp1 = new BorderPane();
    bp1.setLeft(v2);
    bp1.setCenter(v1);
    Label l3 = new Label("\n\n");
    VBox complete = new VBox();
    complete.getChildren().addAll(l1, bp1, l3);
    b1.setOnAction(e -> {
      // start adding/editing/removing milk weight records after this button is clicked.
      int year = -1;
      int month = -1;
      int day = -1;
      double weight = -1.0;
      double newWeight = -1.0;
      String farmID;
      String errmsg = "";
      // These if statements and try-catch blocks below handles different kinds of error cases as
      // described by the corresponding error message.
      try {
        year = Integer.parseInt(Tyear.getText());
        month = Integer.parseInt(Tmonth.getText());
        day = Integer.parseInt(Tday.getText());
        if (year < 0) {
          errmsg = errmsg + "Year information is invalid. Year should not be less than 0\n";
        }
        if (month < 1 || month > 12) {
          errmsg = errmsg
              + "Month information is invalid. Month should not be less than 1 or greater than 12\n";
        }
        if (day < 1 || day > 31) {
          errmsg = errmsg
              + "Day information is invalid. Day should not be less than 1 or greater than 31\n";
        }
      } catch (Exception excpt) {
        errmsg = errmsg + "Date format is incorrect. Year, month, and day should be integers\n";
      }
      try {
        weight = Double.parseDouble(Tweight.getText());
        if (weight < 0) {
          errmsg = errmsg + "Weight information is invalid. Weight should not be less than 0\n";
        }
      } catch (Exception excpt) {
        errmsg = errmsg + "Weight format is incorrect. Weight should be a number.\n";
      }
      farmID = TfarmID.getText();
      if (farmID.equals("")) {
        errmsg = errmsg + "Farm ID should not be empty.\n";
      }
      // if error message is generated, don't add/edit/remove data, show error message in alert
      // windows.
      if (!(errmsg.equals(""))) {
        errmsg = "Error! Please check error message below:\n" + errmsg;
        Alert alert = alertGenerator(errmsg);
      } else {
        // if there's no error message at this stage, continue processing.
        if (cb.getValue() == null) { // handle the case that the user doesn't select any action.
          String message = "Please select from Add/Edit/Remove!";
          Alert alert = alertGenerator(message);
        } else {
          if (cb.getValue().equals("Add")) {// user selects add
            String message = mwm.addRecord(year, month, day, farmID, weight);
            Alert alert = alertGenerator(message);
          } else if (cb.getValue().equals("Edit")) {// user selects edit
            // handle extra error cases for the new weight input field.
            try {
              newWeight = Double.parseDouble(TnewWeight.getText());
              if (newWeight < 0) {
                errmsg =
                    errmsg + "New weight information is invalid, it should not be less than 0\n";
              }
            } catch (Exception excpt) {
              errmsg =
                  errmsg + "Format of new weight is incorrect. New weight should be a number\n";
            }
            if (!(errmsg.equals(""))) {// if error appears, don't edit. Show error message.
              errmsg = "Error! Please check error message below:\n" + errmsg;
              Alert alert = alertGenerator(errmsg);
            } else { // The target record of edition might not be found. In this case, show error
                     // message in alert window.
              String message = mwm.editRecord(year, month, day, farmID, weight, newWeight);
              Alert alert = alertGenerator(message);
            }
          } else if (cb.getValue().equals("Remove")) {
            // The target record of removal might not be found. In this case, show error message in
            // alert window.
            String message = mwm.removeRecord(year, month, day, farmID, weight);
            Alert alert = alertGenerator(message);
          }
        }
      }
    });
    return complete;
  }

  /**
   * This method is responsible for the GUI of generating reports of this program
   * 
   * @return a VBox representing the GUI of this part.
   */
  public VBox getReport() {
    Label l1 = new Label("Get a report");
    Label l2 = new Label("Choose a report type, and enter the required information");
    Label lfarm = new Label("            Farm Report  ");
    Label lannual = new Label("        Annual Report  ");
    Label lmonthly = new Label("      Monthly Report  ");
    Label ldateRange = new Label("Date Range Report  ");
    Label year1 = new Label(" year: ");
    Label year2 = new Label(" year: ");
    Label year3 = new Label(" year: ");
    Label farm = new Label(" farm: ");
    Label month = new Label(" month: ");
    Label start = new Label(" start: ");
    Label end = new Label(" end: ");
    Label space = new Label("                                                        ");
    TextField farmYear = new TextField(); // get the year of farm report from user input.
    TextField farmFarm = new TextField(); // get the farm of farm report from user input.
    TextField annualYear = new TextField(); // get the year of annual report from user input.
    TextField monthlyYear = new TextField(); // get the year of monthly report from user input.
    TextField monthlyMonth = new TextField(); // get the month of monthly report from user input.
    // get the start date of date range report from user input.
    TextField dateRangeStart = new TextField("Format: year-month-day");
    // get the end date of date range report from user input.
    TextField dateRangeEnd = new TextField("Format: month-day");
    Button bfarm = new Button("Submit");
    bfarm.setOnAction(e -> { // start generating farm report after this button is clicked.
      int yearInput = -1;
      String farmIDInput;
      String errmsg = "";
      // These if statements and try-catch blocks below handles different kinds of error cases as
      // described by the corresponding error message.
      try {
        yearInput = Integer.parseInt(farmYear.getText());
        if (yearInput < 0) {
          errmsg = errmsg + "Year is invalid. Year should not be less than 0\n";
        }
      } catch (Exception excpt) {
        errmsg = errmsg + "Year is invalid. Year should be a integer\n";
      }
      farmIDInput = farmFarm.getText();
      if (farmIDInput.equals("")) {
        errmsg = errmsg + "The farm ID should not be empty\n";
      }
      // If error appears, don't generate report. Show error message in the alert window.
      if (!(errmsg.equals(""))) {
        errmsg = "Error! Please check error message below:\n" + errmsg;
        Alert alert = alertGenerator(errmsg);
      } else {
        try {
          // convert the list representing the report to an observable list, which can be used for
          // display.
          ObservableList<String> items =
              FXCollections.observableArrayList(mwm.farmReportGenerator(farmIDInput, yearInput));
          String message = "Farm report successfully generated! Please check.";
          Alert alert = alertGenerator(message);
          report.setItems(items);
        } catch (IllegalArgumentException excpt) {
          // it is possible that no record is found for the specified farm and year. In this case,
          // display the error message in the alert window.
          String message = excpt.getMessage();
          Alert alert = alertGenerator(message);
        }
      }
    });
    Button bannual = new Button("Submit");
    bannual.setOnAction(e -> { // after this button is clicked, start generating annual report.
      int yearInput = -1;
      String errmsg = "";
      // These if statements and try-catch blocks below handles different kinds of error cases as
      // described by the corresponding error message.
      try {
        yearInput = Integer.parseInt(annualYear.getText());
        if (yearInput < 0) {
          errmsg = errmsg + "Year is invalid. Year should not be less than 0\n";
        }
      } catch (Exception excpt) {
        errmsg = errmsg + "Year is invalid. Year should be a integer\n";
      }
      // If error exists, don't generate report. Show error message in the alert window.
      if (!(errmsg.equals(""))) {
        errmsg = "Error! Please check error message below:\n" + errmsg;
        Alert alert = alertGenerator(errmsg);
      } else {
        try {
          // convert the list representing the report to an observable list, which can be used for
          // display.
          ObservableList<String> items =
              FXCollections.observableArrayList(mwm.annualReportGenerator(yearInput));
          String message = "Annual report successfully generated! Please check.";
          Alert alert = alertGenerator(message);
          report.setItems(items);
        } catch (IllegalArgumentException excpt) {
          // it is possible that no record is found for the specified year. In this case,
          // display the error message in the alert window.
          String message = excpt.getMessage();
          Alert alert = alertGenerator(message);
        }
      }
    });
    Button bmonthly = new Button("Submit");
    bmonthly.setOnAction(e -> {// after this button is clicked, start generating monthly report.
      int yearInput = -1;
      int monthInput = -1;
      String errmsg = "";
      // These if statements and try-catch blocks below handles different kinds of error cases as
      // described by the corresponding error message.
      try {
        yearInput = Integer.parseInt(monthlyYear.getText());
        if (yearInput < 0) {
          errmsg = errmsg + "Year is invalid. Year should not be less than 0\n";
        }
      } catch (Exception excpt) {
        errmsg = errmsg + "Year is invalid. Year should be a integer\n";
      }
      try {
        monthInput = Integer.parseInt(monthlyMonth.getText());
        if (monthInput < 1 || monthInput > 12) {
          errmsg =
              errmsg + "Month is invalid. Month should not be less than 1 or greater than 12\n";
        }
      } catch (Exception excpt) {
        errmsg = errmsg + "Month is invalid. Month should be a integer\n";
      }
      // If error exists, don't generate report. Show error message in the alert window.
      if (!(errmsg.equals(""))) {
        errmsg = "Error! Please check error message below:\n" + errmsg;
        Alert alert = alertGenerator(errmsg);
      } else {
        try {
          // convert the list representing the report to an observable list, which can be used for
          // display.
          ObservableList<String> items =
              FXCollections.observableArrayList(mwm.monthlyReportGenerator(yearInput, monthInput));
          String message = "Monthly report successfully generated! Please check.";
          Alert alert = alertGenerator(message);
          report.setItems(items);
        } catch (IllegalArgumentException excpt) {
          // it is possible that no record is found for the specified month. In this case,
          // display the error message in the alert window.
          String message = excpt.getMessage();
          Alert alert = alertGenerator(message);
        }
      }
    });
    Button bdateRange = new Button("Submit");
    bdateRange.setOnAction(e -> {// after this button is clicked, start generating date range
                                 // report.
      String errmsg = "";
      int startYear = -1;
      int startMonth = -1;
      int startDay = -1;
      int endMonth = -1;
      int endDay = -1;
      String[] startDate = dateRangeStart.getText().split("-");
      String[] endDate = dateRangeEnd.getText().split("-");
      // These if statements and try-catch blocks below handles different kinds of error cases as
      // described by the corresponding error message.
      if (startDate.length != 3 || endDate.length != 2) {
        errmsg = errmsg
            + "Format of start date and/or end date are/is incorrect. Correct format of start date should be yyyy-m-d. Correct format of end date should be m-d.\n";
      } else {
        try {
          boolean valid = true;
          startYear = Integer.parseInt(startDate[0]);
          startMonth = Integer.parseInt(startDate[1]);
          startDay = Integer.parseInt(startDate[2]);
          endMonth = Integer.parseInt(endDate[0]);
          endDay = Integer.parseInt(endDate[1]);
          if (startYear < 0) {
            errmsg = errmsg + "Start year is invalid. Year should not be less than 0\n";
            valid = false;
          }
          if (startMonth < 1 || startMonth > 12 || endMonth < 1 || endMonth > 12) {
            errmsg = errmsg
                + "Start and/or end month are/is invalid. Month should not be less than 1 or greater than 12\n";
            valid = false;
          }
          if (startDay < 1 || startDay > 31 || endDay < 1 || endDay > 31) {
            errmsg =
                "Start and/or end day are/is invalid. Day should not be less than 1 or greater than 31\n";
            valid = false;
          }
          if (valid) {
            if (startMonth > endMonth) {
              errmsg = errmsg + "Start month should not be after end month\n";
            } else {
              if (startMonth == endMonth && startDay > endDay) {
                errmsg = errmsg + "Start day should not be after end day\n";
              }
            }
          }
        } catch (Exception excpt) {
          errmsg = errmsg
              + "Format of start date and/or end date are/is incorrect. Year, month and day should be valid integers";
        }
      }
      // If error exists, don't generate report. Show error message in the alert window.
      if (!(errmsg.equals(""))) {
        errmsg = "Error! Please check error message below:\n" + errmsg;
        Alert alert = alertGenerator(errmsg);
      } else {
        try {
          // convert the list representing the report to an observable list, which can be used for
          // display.
          ObservableList<String> items = FXCollections.observableArrayList(
              mwm.dateRangeReportGenerator(startYear, startMonth, startDay, endMonth, endDay));
          String message = "Date range report successfully generated! Please check.";
          Alert alert = alertGenerator(message);
          report.setItems(items);
        } catch (IllegalArgumentException excpt) {
          // it is possible that no record is found for the specified date range. In this case,
          // display the error message in the alert window.
          String message = excpt.getMessage();
          Alert alert = alertGenerator(message);
        }
      }
    });
    HBox hFarm = new HBox();
    hFarm.getChildren().addAll(lfarm, year1, farmYear, farm, farmFarm, bfarm);
    HBox hAnnual = new HBox();
    hAnnual.getChildren().addAll(lannual, year2, annualYear, space, bannual);
    HBox hMonthly = new HBox();
    hMonthly.getChildren().addAll(lmonthly, year3, monthlyYear, month, monthlyMonth, bmonthly);
    HBox hDateRange = new HBox();
    hDateRange.getChildren().addAll(ldateRange, start, dateRangeStart, end, dateRangeEnd,
        bdateRange);
    VBox v1 = new VBox();
    v1.getChildren().addAll(l1, l2, hFarm, hAnnual, hMonthly, hDateRange);
    return v1;
  }

  /**
   * This method is responsible for displaying the report generated by the user. It always shows the
   * report that is most recently generated. The report is saved in the report field.
   * 
   * @return a VBox representing the GUI of this part.
   */
  public VBox reportView() {
    BorderPane bp2 = new BorderPane();
    bp2.setCenter(new Label("Report"));
    BorderPane bp1 = new BorderPane();
    report.setPrefHeight(600);
    bp1.setCenter(report);
    VBox v1 = new VBox();
    v1.getChildren().addAll(bp2, bp1);
    return v1;
  }

  /**
   * This method is responsible for the GUI of generating file output of this program
   * 
   * @return a VBox representing the GUI of this part.
   */
  public VBox fileOutput() {
    Label l3 = new Label("\n\nFile Output (the output file is in the same folder as the program)");
    Label l1 = new Label(
        "If you want to save the data which are already loaded into a .csv file for future use,\nenter the file name that you want to save as in the text box below:");
    // get file name from user input for saving data.
    TextField t1 = new TextField("File name end in .csv");
    Label l4 = new Label("                             ");
    Button b1 = new Button("Submit");
    Label l2 = new Label(
        "If you want to save the report that you just generated into a .txt file,\nenter the file name that you want to save as in the text box below:");
    // get file name from user input for saving report.
    TextField t2 = new TextField("File name end in .txt");
    Label l5 = new Label("                             ");
    Button b2 = new Button("Submit");
    b1.setOnAction(e -> { // if this button is clicked, start saving data to a .csv file.
      String fileName = t1.getText();
      String[] temp = fileName.split("\\.");
      String ending = temp[temp.length - 1];
      String message = "Output file successfully generated!";
      String errmsg = "";
      if (!(ending.equals("csv"))) {
        // check whether the file name entered by the user have a .csv ending. If not, don't save
        // data and display error message in the alert window.
        errmsg =
            " Please enter a valid file name. The output file can only be a .csv file for data saving!";
        Alert alert = alertGenerator(errmsg);
      } else {
        try {
          mwm.saveData(fileName);
          Alert alert = alertGenerator(message);
        } catch (FileNotFoundException excpt) {
        }
      }
    });
    b2.setOnAction(e -> {
      // if this button is clicked, start saving report to a .txt file. The report which is going to
      // be saved will be the report that is currently on display.
      String fileName = t2.getText();
      String[] temp = fileName.split("\\.");
      String ending = temp[temp.length - 1];
      String message = "Output file successfully generated!";
      String errmsg = "";
      if (!(ending.equals("txt"))) {
        // check whether the file name entered by the user have a .txt ending. If not, don't save
        // report and display error message in the alert window.
        errmsg =
            " Please enter a valid file name. The output file can only be a .txt file for report saving!";
        Alert alert = alertGenerator(errmsg);
      } else {
        try {
          mwm.saveReport(report.getItems(), fileName);
          Alert alert = alertGenerator(message);
        } catch (FileNotFoundException excpt) {
        }
      }
    });
    HBox h1 = new HBox();
    h1.getChildren().addAll(l4, t1, b1);
    HBox h2 = new HBox();
    h2.getChildren().addAll(l5, t2, b2);
    VBox v1 = new VBox();
    v1.getChildren().addAll(l3, l1, h1, l2, h2);
    return v1;
  }
}
